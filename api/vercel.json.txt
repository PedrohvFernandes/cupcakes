Hospedagem back-end vercel com TS + Express: Quando é ts tem que ser feito algumas configurações a mais por conta do build

obs: Somente Express funciona na vercel

https://www.youtube.com/watch?v=B-T69_VP2Ls Deploy an Express API to Vercel

https://www.youtube.com/watch?v=FZiza5N6BQU Deploy Nodejs Com Vercel e Banco de Dados gratuito(Nao precisa de build, praticamente igual ao deploy do back-end usando js + express, so colocar o vercel.json e pronto, sem nenhum script build)
https://github.com/danileao/deploy-free/blob/master/tsconfig.json

https://www.youtube.com/watch?v=8jttLYYDWjo Deploy API Node GRÁTIS na Vercel A Alternativa Mais Eficiente(Build manual)

se usar o builds no arquivo vercel.json: ex: vercel2.json.txt
"builds": [
    {
      "src": "src/server.ts",
      "use": "@vercel/node"
    }
  ],

  quando subir o projeto ele nao vai usar o npm run build(Script no pacakge.json), vai funcionar sem ter nem um build(dist), mas:

  caso tenha custom mappings, os mesmos precisam ser buildados para ter o caminho correto, e no build feito por mim no script pacakge.json, ele faz isso, alem de buildar o projeto(tsc), ele builda os mappings(tsc-alias). Se os caminhos nao forem buildados o projeto nao vai funcionar, pois nao vai encontrar os caminhos corretos.


  Com isso temos essa alternativa caso voce use custom mappings no tsconfig.json e precise buildar o projeto e os mappings: Lembre de nao bloquear a pasta dist no gitignore caso fizer dessa maneira, pois é ela que vai ser usada no deploy, pois aqui esta fazendo um pre-commit, que vai buildar e enviar a pasta dist para o github no momento do commit, e no deploy a pasta dist vai ser usada. De certa forma a vercel ainda nao ira utilizar script build no momento do deploy, mas vai usar a pasta dist que foi buildada no pre-commit. ex: vercel3.json.txt
  https://dev.to/tirthpatel/deploy-node-ts-express-typescript-on-vercel-284h (Build automatico no pre-commit)
  https://github.com/tirth-2001/express-typescript-vercel-part2

  https://codegenitor.medium.com/deploy-typescript-nodejs-vercel-env-edd9e5673ced

  Ex: https://github.com/hebertcisco/vercel-typescript-express-api/blob/main/package.json

Caso o pre-commit nao funcione, você pode usar o build manualmente e jogar a pasta dist pro repositorio para a vercel utilizar ele


Para js + express: é bem mais simples

https://github.com/PedrohvFernandes/PedrohvFernandes-web-page-portfolio/blob/main/backend/vercel.json
https://vercel.com/pedrohvfernandes/smtp-envio-de-email-portfolio
https://vercel.com/pedrohvfernandes/smtp-envio-de-email-portfolio/settings -> Root Directory: backend. Nesse caso tive que colocar a raiz como backend, no momento do deploy na Vercel. A raiz é a onde estaria a api, tive que fazer isso pois tenho o back-end e front-end no mesmo repositório, caso seu projeto seja somente a api, a raiz seria -> ./

https://masteringbackend.com/posts/how-to-deploy-your-node-js-backend-project-to-vercel-a-step-by-step-guide

https://www.youtube.com/watch?v=TPXr2fkz0EM&t=159s COMO FAZER DEPLOY FRONT END / BACK END - NETLIFY - VERCEL

https://dev.to/tirthpatel/node-js-express-app-on-vercel-develop-run-deploy-524a


 Caso na hora do deploy ele reclame de uma pasta public, basta criar e colocar um .gitkeep dentro dela



 nodemon: Serve para reiniciar o servidor quando houver alteração no arquivo e adapta a execução para ts-node quando o arquivos for .ts e node quando for .js. Obs pra usar o ts-node é preciso instalar o ts-node e o typescript

 https://stackshare.io/stackups/npm-ts-node-vs-npm-ts-node-dev
 ts-node-dev: Serve para executar arquivo .ts e reiniciar o servidor quando houver alteração no arquivo
 ts-node: Serve para executar arquivo .ts
 
 node: Serve para executar arquivo .js